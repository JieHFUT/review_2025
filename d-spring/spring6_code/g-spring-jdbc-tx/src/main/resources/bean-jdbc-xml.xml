<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">




    <!--1.添加组件扫描-->
    <context:component-scan base-package="com.jiehfut"></context:component-scan>

    <!--2.导入外部属性文件，创建数据源对象-->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!--3.配置数据源-->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!--4.配置 JdbcTemplate，封装 jdbc 类
      创建一个 JdbcTemplate bean 对象，将对象注入数据源，-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <!--进行依赖注入，装配数据源-->
        <property name="dataSource" ref="druidDataSource"/>
    </bean>




    <!--5.下面是事务有关行为：配置事务相关信息（配置事务管理器），对哪个数据源进行事务操作-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"></property>
    </bean>


    <!--6.配置事务增强：指定使用哪一个事务管理器-->
    <!--也就是之前使用@Transactional注解的功能在下面进行定义-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- tx:method标签：配置具体的事务方法 -->
            <!-- name属性：指定方法名，可以使用星号代表多个字符 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>

            <!-- read-only属性：设置只读属性 -->
            <!-- rollback-for属性：设置回滚的异常 -->
            <!-- no-rollback-for属性：设置不回滚的异常 -->
            <!-- isolation属性：设置事务的隔离级别 -->
            <!-- timeout属性：设置事务的超时属性 -->
            <!-- propagation属性：设置事务的传播行为 -->
            <tx:method name="save*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRES_NEW"/>
            <tx:method name="update*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRES_NEW"/>
            <tx:method name="delete*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRES_NEW"/>
        </tx:attributes>
    </tx:advice>

    <tx:advice id="axAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <!--........-->
            <!--........-->
        </tx:attributes>
    </tx:advice>


    <aop:config>
        <!-- 配置事务通知和切入点表达式 -->
        <!-- 也就是上面配置的事务配置信息在哪里起作用-->
        <aop:pointcut id="pt" expression="execution(* com.jiehfut.xml.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.jiehfut.xml.service.impl.*.*(..))"></aop:advisor>
        <aop:advisor advice-ref="axAdvice" pointcut-ref="pt"></aop:advisor>

    </aop:config>


</beans>