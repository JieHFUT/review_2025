<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.jiehfut</groupId>
    <artifactId>f-maven-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
    <!--由于父工程是不需要参与打包的，所以打包方式为 pom，父工程也不需要 src 文件夹，可以删除-->
    <packaging>pom</packaging>
    <modules>
        <!--父工程对子工程进行构建管理与维护，一键管理，一键构建，对父工程进行了什么操作，子工程也会进行同样的操作-->
        <!--
            例如直接对父工程进行打包操作，也会对子工程按照顺序进行构建打包
            [INFO] f-maven-parent                                                     [pom]
            [INFO] f-maven-son-a                                                      [jar]
            [INFO] f-maven-son-b                                                      [jar]
        -->
        <module>f-maven-son-a</module>
        <module>f-maven-son-b</module>
    </modules>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <!--在父工程中进行依赖管理一般使用 dependencyManagement 标签-->
    <dependencyManagement>
        <dependencies>
            <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
            <!--如果没有 dependencyManagement 标签，父工程中的依赖会无条件的继承给子工程，不会受到依赖范围的限制-->
            <!--使用 dependencyManagement 标签，就需要子工程自己主动去选择需要继承哪些依赖-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>1.2.8</version>
            </dependency>

            <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>5.10.2</version>
                <scope>test</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>


</project>