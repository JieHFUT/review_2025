spring.application.name=c-springboot-logging

# 修改以 logging 开头的日志格式（默认格式在 springboot:3.4.1 => spring-boot-3.4.1.jar => META-INF =>addition-spring-...）
# logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} ===> %msg%n


# 默认所有日志级别 - 如果某个日志没有设置级别，默认为此配置级别（spring 底层默认级别是 info）
logging.level.root=debug


# 设置这个包下的日志只会打印 warn 级别以后的日志
logging.level.com.jiehfut.cspringbootlogging.controller=info
logging.level.com.jiehfut.cspringbootlogging.service=warn
logging.level.com.jiehfut.cspringbootlogging.dao=error

# 可以对包设置级别进行分组
logging.group.dsc=com.jiehfut.cspringbootlogging.controller,com.jiehfut.cspringbootlogging.service,com.jiehfut.cspringbootlogging.dao
logging.level.dsc=debug
# spring 提供了两个默认分组为 debug（数据库有关分组、web有关分组）
logging.level.sql=debug
logging.level.web=debug

# 进行日志文件配置
# 如果你使用（resources/logback.xml || resources/logback-spring.xml）配置了一些信息，spring会采用你的配置覆盖原本的属性
# 注意：如果使用上面这两个日志，application.properties 里面的所有的日志设置就不会生效了

# 指定日志文件的路径（默认当前项目路径，存在logging.file.name时候，此配置不起作用；只有路径默认名字是 spring.log）
# logging.file.path=E:\\code\\springboot_code\\c-springboot-logging\\src\\main\\java\\com\\jiehfut\\cspringbootlogging\\controller

# 指定日志文件的名称（可以使用路径+名字：D:\\slogging.log）
logging.file.name=E:\\code\\all-moudles-review\\f-springboot\\c-springboot-logging\\src\\main\\java\\com\\jiehfut\\cspringbootlogging\\log\\slogging.log

# 日志归档 && 滚动切割
# 日志归档（每天的日志存在一个文件中 LOG_FILE 就是前面配置的日志名称）
# 归档就是 slogging.log 只会保存今天的日志，今天过完会将今天的日志进行归档成为 slogging.log.2025-01-01.0.gz，然后 slogging.log 会记录下一天的日志
logging.logback.rollingpolicy.file-name-pattern=${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz
# 日志切割（某一天的日志太大了，将其分割为多个文件） default=10MB
logging.logback.rollingpolicy.max-file-size=1MB
# 是否每次启动时删除之前的存档
logging.logback.rollingpolicy.clean-history-on-start=false
# 设置日志最多可以容纳多少
logging.logback.rollingpolicy.total-size-cap=1GB
# 设置日志最多可以保存多少天
logging.logback.rollingpolicy.max-history=10

# 直接配置的方式只支持 logback 的方式，因为 springboot 底层默认使用该种日志
# 如果想使用其他日志类，如 log4j2，直接在项目中添加 log4j2 框架的配置文件（resources/log4j2.xml || resources/log4j2-spring.xml）